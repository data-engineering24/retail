{
	"name": "DF_salesDetails",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage1",
						"type": "LinkedServiceReference"
					},
					"name": "srcInwardHeader"
				},
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage1",
						"type": "LinkedServiceReference"
					},
					"name": "srcInwardDetail"
				},
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage1",
						"type": "LinkedServiceReference"
					},
					"name": "srcSalesHeader"
				},
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage1",
						"type": "LinkedServiceReference"
					},
					"name": "srcSalesDetail"
				},
				{
					"linkedService": {
						"referenceName": "impiger_dev_db",
						"type": "LinkedServiceReference"
					},
					"name": "srcBranch"
				},
				{
					"linkedService": {
						"referenceName": "impiger_dev_db",
						"type": "LinkedServiceReference"
					},
					"name": "srcCity"
				},
				{
					"linkedService": {
						"referenceName": "impiger_dev_db",
						"type": "LinkedServiceReference"
					},
					"name": "srcPaymentMode"
				},
				{
					"linkedService": {
						"referenceName": "impiger_dev_db",
						"type": "LinkedServiceReference"
					},
					"name": "srcProductGroup"
				},
				{
					"linkedService": {
						"referenceName": "impiger_dev_db",
						"type": "LinkedServiceReference"
					},
					"name": "srcPaymentType"
				},
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage1",
						"type": "LinkedServiceReference"
					},
					"name": "srcProduct"
				},
				{
					"linkedService": {
						"referenceName": "impiger_dev_db",
						"type": "LinkedServiceReference"
					},
					"name": "srcState"
				},
				{
					"linkedService": {
						"referenceName": "impiger_dev_db",
						"type": "LinkedServiceReference"
					},
					"name": "srcCountry"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "impiger_dev_db",
						"type": "LinkedServiceReference"
					},
					"name": "sinkBranchDim"
				},
				{
					"linkedService": {
						"referenceName": "impiger_dev_db",
						"type": "LinkedServiceReference"
					},
					"name": "sinkpaymentmodeDim"
				},
				{
					"linkedService": {
						"referenceName": "impiger_dev_db",
						"type": "LinkedServiceReference"
					},
					"name": "sinkProductGroupDim"
				},
				{
					"linkedService": {
						"referenceName": "impiger_dev_db",
						"type": "LinkedServiceReference"
					},
					"name": "sinkPaymentTypeDim"
				},
				{
					"linkedService": {
						"referenceName": "impiger_dev_db",
						"type": "LinkedServiceReference"
					},
					"name": "sinkProductDim"
				},
				{
					"linkedService": {
						"referenceName": "impiger_dev_db",
						"type": "LinkedServiceReference"
					},
					"name": "sinkFactSalesDetail"
				}
			],
			"transformations": [
				{
					"name": "joinInward"
				},
				{
					"name": "selectInward"
				},
				{
					"name": "joinSales"
				},
				{
					"name": "selectSales"
				},
				{
					"name": "unionSales"
				},
				{
					"name": "selectCity"
				},
				{
					"name": "selectPaymenMode"
				},
				{
					"name": "selectProductGroup"
				},
				{
					"name": "selectPaymentType"
				},
				{
					"name": "selectProduct"
				},
				{
					"name": "JoinBranchCity"
				},
				{
					"name": "SelectBranchCity"
				},
				{
					"name": "JoinBranchState"
				},
				{
					"name": "selectState"
				},
				{
					"name": "SelectBranchState"
				},
				{
					"name": "joinBranch"
				},
				{
					"name": "selectBranch"
				},
				{
					"name": "sortProductGroupID"
				},
				{
					"name": "sortPaymentTypeID"
				},
				{
					"name": "sortProductID"
				},
				{
					"name": "sortPaymentModeID"
				},
				{
					"name": "AlterRow1"
				},
				{
					"name": "alterRowProduct"
				}
			],
			"scriptLines": [
				"source(output(",
				"          inward_header_id as short,",
				"          inward_date as date 'MM/dd/yyyy',",
				"          supplier_id as short,",
				"          branch_id as short,",
				"          collected_by as boolean,",
				"          verified_by as boolean,",
				"          amount as integer,",
				"          discount_amount as double,",
				"          tax_amount as double,",
				"          final_amount as double,",
				"          status_id as boolean,",
				"          created_date as date,",
				"          created_by as boolean,",
				"          updated_date as date,",
				"          updated_by as boolean",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     fileSystem: 'inbound',",
				"     folderPath: 'retail',",
				"     fileName: 'abc_inward_header_20200229.csv',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> srcInwardHeader",
				"source(output(",
				"          inward_detail_id as short,",
				"          inward_header_id as short,",
				"          po_detail_id as short,",
				"          product_id as short,",
				"          uom_id as short,",
				"          qty as short,",
				"          amount as integer,",
				"          batch_number as short,",
				"          expiry_date as date,",
				"          status_id as short,",
				"          created_date as date,",
				"          created_by as boolean,",
				"          updated_date as date,",
				"          updated_by as boolean",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     fileSystem: 'inbound',",
				"     folderPath: 'retail',",
				"     fileName: 'abc_inward_detail_20200229.csv',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> srcInwardDetail",
				"source(output(",
				"          sales_header_id as short,",
				"          sales_header_date as date 'MM/dd/yyyy',",
				"          branch_id as short,",
				"          terminal_id as short,",
				"          teller_id as short,",
				"          customer_id as short,",
				"          sales_amount as double,",
				"          discount_info_id as string,",
				"          discount_amount as short,",
				"          redemption_amount as boolean,",
				"          tax1_amount as short,",
				"          tax2_amount as string,",
				"          payable_amount as short,",
				"          payment_mode_id as short,",
				"          payment_type_id as string,",
				"          payment_ref as integer,",
				"          status_id as boolean,",
				"          created_date as date,",
				"          created_by as boolean,",
				"          updated_date as date,",
				"          updated_by as boolean",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     fileSystem: 'inbound',",
				"     folderPath: 'retail',",
				"     fileName: 'abd_sales_header_20240904.csv',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> srcSalesHeader",
				"source(output(",
				"          sales_detail_id as short,",
				"          sales_header_id as short,",
				"          product_id as short,",
				"          uom_id as short,",
				"          unit_price as double,",
				"          qty as short,",
				"          discount_info_id as string,",
				"          sales_amount as double,",
				"          discount_amount as double,",
				"          tax1_amount as double,",
				"          tax2_amount as string,",
				"          payable_amount as short,",
				"          status_id as boolean,",
				"          created_date as date,",
				"          created_by as boolean,",
				"          updated_date as date,",
				"          updated_by as boolean,",
				"          {Unnamed: 17} as string,",
				"          {Unnamed: 18} as string,",
				"          {Unnamed: 19} as string",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     fileSystem: 'inbound',",
				"     folderPath: 'retail',",
				"     fileName: 'abd_sales_detail_20240904.csv',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> srcSalesDetail",
				"source(output(",
				"          branch_id as integer,",
				"          branch as string,",
				"          branch_incharge as integer,",
				"          address as string,",
				"          city_id as integer,",
				"          state_id as integer,",
				"          country_id as integer,",
				"          status_id as integer,",
				"          created_date as date,",
				"          created_by as integer,",
				"          updated_date as date,",
				"          updated_by as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'retail',",
				"     tableName: 'm_branch',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> srcBranch",
				"source(output(",
				"          city_id as integer,",
				"          city as string,",
				"          state_id as integer,",
				"          status_id as integer,",
				"          created_date as date,",
				"          created_by as integer,",
				"          updated_date as date,",
				"          updated_by as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'retail',",
				"     tableName: 'm_city',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> srcCity",
				"source(output(",
				"          payment_mode_id as integer,",
				"          payment_mode as string,",
				"          status_id as integer,",
				"          created_date as timestamp,",
				"          created_by as integer,",
				"          updated_date as timestamp,",
				"          updated_by as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'retail',",
				"     tableName: 'm_payment_mode',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> srcPaymentMode",
				"source(output(",
				"          product_group_id as integer,",
				"          product_group as string,",
				"          status_id as integer,",
				"          created_date as date,",
				"          created_by as integer,",
				"          updated_date as date,",
				"          updated_by as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'retail',",
				"     tableName: 'm_product_group',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> srcProductGroup",
				"source(output(",
				"          product_type_id as integer,",
				"          product_type as string,",
				"          status_id as integer,",
				"          created_date as date,",
				"          created_by as integer,",
				"          updated_date as date,",
				"          updated_by as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'retail',",
				"     tableName: 'm_product_type',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> srcPaymentType",
				"source(output(",
				"          product_id as short,",
				"          product_name as string,",
				"          product_type_id as short,",
				"          product_group_id as short,",
				"          unit as double,",
				"          uom_id as short,",
				"          manufacturer_id as short,",
				"          supplier_id as short,",
				"          reorder_level as short,",
				"          status_id as boolean,",
				"          created_date as date,",
				"          created_by as boolean,",
				"          updated_date as date,",
				"          updated_by as boolean",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     fileSystem: 'inbound',",
				"     folderPath: 'retail',",
				"     fileName: 'xyz_product_20231202.csv',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> srcProduct",
				"source(output(",
				"          state_id as integer,",
				"          state as string,",
				"          country_id as integer,",
				"          status_id as integer,",
				"          created_date as date,",
				"          created_by as integer,",
				"          updated_date as date,",
				"          updated_by as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'retail',",
				"     tableName: 'm_state',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> srcState",
				"source(output(",
				"          country_id as integer,",
				"          country as string,",
				"          region as string,",
				"          status_id as integer,",
				"          created_date as date,",
				"          created_by as integer,",
				"          updated_date as date,",
				"          updated_by as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     limit: 100,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'retail',",
				"     tableName: 'm_country',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> srcCountry",
				"srcInwardHeader, srcInwardDetail join(srcInwardHeader@inward_header_id == srcInwardDetail@inward_header_id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinInward",
				"joinInward select(mapColumn(",
				"          sales_date = inward_date,",
				"          supplier_id,",
				"          branch_id,",
				"          collected_by,",
				"          product_id,",
				"          uom_id,",
				"          qty,",
				"          amount = srcInwardDetail@amount",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectInward",
				"srcSalesHeader, srcSalesDetail join(srcSalesHeader@sales_header_id == srcSalesDetail@sales_header_id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinSales",
				"joinSales select(mapColumn(",
				"          sales_date = sales_header_date,",
				"          branch_id,",
				"          terminal_id,",
				"          teller_id,",
				"          customer_id,",
				"          payment_mode_id,",
				"          payment_type_id,",
				"          product_id,",
				"          uom_id,",
				"          unit_price,",
				"          qty,",
				"          sales_amount = srcSalesDetail@sales_amount,",
				"          discount_amount = srcSalesDetail@discount_amount,",
				"          tax1_amount = srcSalesDetail@tax1_amount,",
				"          tax2_amount = srcSalesDetail@tax2_amount,",
				"          payable_amount = srcSalesDetail@payable_amount",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectSales",
				"selectInward, selectSales union(byName: true)~> unionSales",
				"srcCity select(mapColumn(",
				"          city_id,",
				"          city,",
				"          state_id",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectCity",
				"srcPaymentMode select(mapColumn(",
				"          payment_mode_id,",
				"          payment_mode",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectPaymenMode",
				"srcProductGroup select(mapColumn(",
				"          product_group_id,",
				"          product_group",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectProductGroup",
				"srcPaymentType select(mapColumn(",
				"          product_type_id,",
				"          product_type",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectPaymentType",
				"srcProduct select(mapColumn(",
				"          product_id,",
				"          product_name,",
				"          product_type_id,",
				"          product_group_id,",
				"          unit,",
				"          uom_id,",
				"          manufacturer_id,",
				"          supplier_id,",
				"          reorder_level",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectProduct",
				"srcBranch, srcCity join(srcBranch@city_id == srcCity@city_id,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinBranchCity",
				"JoinBranchCity select(mapColumn(",
				"          branch_id,",
				"          branch,",
				"          address,",
				"          city_id = srcBranch@city_id,",
				"          state_id = srcBranch@state_id,",
				"          country_id,",
				"          city",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectBranchCity",
				"SelectBranchCity, srcState join(SelectBranchCity@state_id == srcState@state_id,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinBranchState",
				"srcState select(mapColumn(",
				"          state_id,",
				"          state",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectState",
				"JoinBranchState select(mapColumn(",
				"          branch_id,",
				"          branch,",
				"          address,",
				"          city_id,",
				"          city,",
				"          state,",
				"          country_id = SelectBranchCity@country_id",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectBranchState",
				"SelectBranchState, srcCountry join(SelectBranchState@country_id == srcCountry@country_id,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinBranch",
				"joinBranch select(mapColumn(",
				"          branch_id,",
				"          branch,",
				"          address,",
				"          city,",
				"          state,",
				"          country",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectBranch",
				"selectProductGroup sort(asc(product_group_id, true)) ~> sortProductGroupID",
				"selectPaymentType sort(asc(product_type_id, true)) ~> sortPaymentTypeID",
				"selectProduct sort(asc(product_id, true)) ~> sortProductID",
				"selectPaymenMode sort(asc(payment_mode_id, true)) ~> sortPaymentModeID",
				"sortPaymentModeID alterRow(upsertIf(1==1)) ~> AlterRow1",
				"sortProductID alterRow() ~> alterRowProduct",
				"selectBranch sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'retail',",
				"     tableName: 'DimBranch',",
				"     insertable: true,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: false,",
				"     recreate: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sinkBranchDim",
				"AlterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'retail',",
				"     tableName: 'DimPaymentMode',",
				"     insertable: false,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: true,",
				"     keys:['payment_mode_id'],",
				"     skipKeyWrites:true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sinkpaymentmodeDim",
				"sortProductGroupID sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'retail',",
				"     tableName: 'DimProductGroup',",
				"     insertable: false,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: true,",
				"     keys:['product_group_id'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sinkProductGroupDim",
				"sortPaymentTypeID sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'retail',",
				"     tableName: 'DimPaymentType',",
				"     insertable: false,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: true,",
				"     keys:['product_type_id'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sinkPaymentTypeDim",
				"alterRowProduct sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'retail',",
				"     tableName: 'DimProduct',",
				"     insertable: false,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: true,",
				"     keys:['product_id'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sinkProductDim",
				"unionSales sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'retail',",
				"     tableName: 'FactSalesDetail',",
				"     insertable: true,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sinkFactSalesDetail"
			]
		}
	}
}